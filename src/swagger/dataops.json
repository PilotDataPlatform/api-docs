{
  "openapi": "3.0.2",
  "info": {
    "title": "Dataops Service",
    "description": "Dataops",
    "version": "0.3.0"
  },
  "paths": {
    "/v1/filedata/": {
      "post": {
        "tags": [
          "filedata"
        ],
        "summary": "Create or Update filedata meta",
        "operationId": "post_v1_filedata__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FiledataMetaPOST"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FiledataMetaPOSTResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/": {
      "get": {
        "tags": [
          "task-management"
        ],
        "summary": "Asynchronized Task Management API, Get task information",
        "operationId": "get_v1_tasks__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Label",
              "default": "Container"
            },
            "name": "label",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Job Id",
              "default": "*"
            },
            "name": "job_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Code",
              "default": "*"
            },
            "name": "code",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Action",
              "default": "*"
            },
            "name": "action",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Operator",
              "default": "*"
            },
            "name": "operator",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "task-management"
        ],
        "summary": "Asynchronized Task Management API, Update tasks",
        "operationId": "put_v1_tasks__put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDispatchPUT"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "task-management"
        ],
        "summary": "Asynchronized Task Management API, Create a new task",
        "operationId": "post_v1_tasks__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDispatchPOST"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDispatchPOSTResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "task-management"
        ],
        "summary": "Asynchronized Task Management API, Delete tasks",
        "operationId": "delete_v1_tasks__delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDispatchDELETE"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/files/actions/": {
      "post": {
        "tags": [
          "file-operations"
        ],
        "summary": "File operations api, invoke an async file operation job",
        "operationId": "post_v1_files_actions__post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Authorization",
              "type": "string"
            },
            "name": "authorization",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Refresh-Token",
              "type": "string"
            },
            "name": "refresh-token",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileOperationsPOST"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileOperationsPOSTResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/files/actions/message/": {
      "post": {
        "tags": [
          "file-actions-message-hub"
        ],
        "summary": "Used for dev debugging purpose",
        "operationId": "post_v1_files_actions_message__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageHubPOST"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageHubPOSTResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/archive": {
      "get": {
        "tags": [
          "archive"
        ],
        "summary": "Get a zip preview given file id",
        "description": "Get a Zip preview.",
        "operationId": "get_v1_archive_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "File Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "file_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchiveGETResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "archive"
        ],
        "summary": "Create a zip preview",
        "description": "Create a ZIP preview given a file_id and preview as a dict.",
        "operationId": "post_v1_archive_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivePOSTRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchivePOSTResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "archive"
        ],
        "summary": "Delete a zip preview, only used for unit tests",
        "description": "Delete preview given a file_id.",
        "operationId": "delete_v1_archive_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveDELETERequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/resource/lock/": {
      "get": {
        "tags": [
          "resource-lock"
        ],
        "summary": "Check a lock",
        "operationId": "check_lock_v2_resource_lock__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Resource Key",
              "type": "string"
            },
            "name": "resource_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceLockResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "resource-lock"
        ],
        "summary": "Create a new lock",
        "operationId": "lock_v2_resource_lock__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceLockRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceLockResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "resource-lock"
        ],
        "summary": "Remove a lock",
        "operationId": "unlock_v2_resource_lock__delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceLockRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceLockResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/resource/lock/bulk": {
      "post": {
        "tags": [
          "resource-lock"
        ],
        "summary": "Create multiple locks",
        "operationId": "bulk_lock_v2_resource_lock_bulk_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceLockBulkRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceLockBulkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "resource-lock"
        ],
        "summary": "Remove multiple locks",
        "operationId": "bulk_unlock_v2_resource_lock_bulk_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceLockBulkRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceLockBulkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ArchiveDELETERequest": {
        "title": "ArchiveDELETERequest",
        "required": [
          "file_id"
        ],
        "type": "object",
        "properties": {
          "file_id": {
            "title": "File Id",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ArchiveGETResponse": {
        "title": "ArchiveGETResponse",
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EAPIResponseCode"
              }
            ],
            "default": 200
          },
          "error_msg": {
            "title": "Error Msg",
            "type": "string",
            "default": ""
          },
          "page": {
            "title": "Page",
            "type": "integer",
            "default": 0
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "default": 1
          },
          "num_of_pages": {
            "title": "Num Of Pages",
            "type": "integer",
            "default": 1
          },
          "result": {
            "title": "Result",
            "type": "object",
            "default": {},
            "example": {}
          }
        }
      },
      "ArchivePOSTRequest": {
        "title": "ArchivePOSTRequest",
        "required": [
          "file_id",
          "archive_preview"
        ],
        "type": "object",
        "properties": {
          "file_id": {
            "title": "File Id",
            "type": "string",
            "format": "uuid"
          },
          "archive_preview": {
            "title": "Archive Preview",
            "type": "object"
          }
        }
      },
      "ArchivePOSTResponse": {
        "title": "ArchivePOSTResponse",
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EAPIResponseCode"
              }
            ],
            "default": 200
          },
          "error_msg": {
            "title": "Error Msg",
            "type": "string",
            "default": ""
          },
          "page": {
            "title": "Page",
            "type": "integer",
            "default": 0
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "default": 1
          },
          "num_of_pages": {
            "title": "Num Of Pages",
            "type": "integer",
            "default": 1
          },
          "result": {
            "title": "Result",
            "type": "object",
            "default": {},
            "example": {}
          }
        }
      },
      "EAPIResponseCode": {
        "title": "EAPIResponseCode",
        "enum": [
          200,
          500,
          400,
          404,
          403,
          401,
          409,
          202
        ],
        "description": "An enumeration."
      },
      "FileOperationPayload": {
        "title": "FileOperationPayload",
        "required": [
          "targets",
          "source"
        ],
        "type": "object",
        "properties": {
          "request_id": {
            "title": "Request Id",
            "type": "string",
            "format": "uuid"
          },
          "targets": {
            "title": "Targets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileOperationTarget"
            }
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "destination": {
            "title": "Destination",
            "type": "string"
          }
        },
        "description": "Validate structure of payload in file operation post body."
      },
      "FileOperationTarget": {
        "title": "FileOperationTarget",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          }
        },
        "description": "Validate structure of single target in file operation payload."
      },
      "FileOperationsPOST": {
        "title": "FileOperationsPOST",
        "required": [
          "session_id",
          "payload",
          "operator",
          "project_code"
        ],
        "type": "object",
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "task_id": {
            "title": "Task Id",
            "type": "string",
            "default": "default_task_id"
          },
          "payload": {
            "$ref": "#/components/schemas/FileOperationPayload"
          },
          "operator": {
            "title": "Operator",
            "type": "string"
          },
          "operation": {
            "title": "Operation",
            "type": "string",
            "default": "copy/delete"
          },
          "project_code": {
            "title": "Project Code",
            "type": "string"
          }
        }
      },
      "FileOperationsPOSTResponse": {
        "title": "FileOperationsPOSTResponse",
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EAPIResponseCode"
              }
            ],
            "default": 200
          },
          "error_msg": {
            "title": "Error Msg",
            "type": "string",
            "default": ""
          },
          "page": {
            "title": "Page",
            "type": "integer",
            "default": 0
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "default": 1
          },
          "num_of_pages": {
            "title": "Num Of Pages",
            "type": "integer",
            "default": 1
          },
          "result": {
            "title": "Result",
            "type": "object",
            "default": {},
            "example": [
              {
                "session_id": "unique_session_2021",
                "job_id": "1bfe8fd8-8b41-11eb-a8bd-eaff9e667817-1616439732",
                "source": "file1.png",
                "action": "data_transfer",
                "status": "PENDING",
                "project_code": "testproject",
                "operator": "admin",
                "progress": 0,
                "payload": {},
                "update_timestamp": "1616439731"
              },
              {
                "session_id": "unique_session_2021",
                "job_id": "1c90ceac-8b41-11eb-bf7a-eaff9e667817-1616439733",
                "source": "a/b/file1.png",
                "action": "data_upload",
                "status": "SUCCEED",
                "project_code": "testproject",
                "operator": "admin",
                "progress": 0,
                "payload": {},
                "update_timestamp": "1616439732"
              }
            ]
          }
        }
      },
      "FiledataMetaPOST": {
        "title": "FiledataMetaPOST",
        "required": [
          "uploader",
          "file_name",
          "file_size",
          "namespace",
          "labels",
          "project_code"
        ],
        "type": "object",
        "properties": {
          "uploader": {
            "title": "Uploader",
            "type": "string"
          },
          "file_name": {
            "title": "File Name",
            "type": "string"
          },
          "file_size": {
            "title": "File Size",
            "type": "integer"
          },
          "namespace": {
            "title": "Namespace",
            "type": "string"
          },
          "labels": {
            "title": "Labels",
            "type": "array",
            "items": {}
          },
          "project_code": {
            "title": "Project Code",
            "type": "string"
          },
          "parent_folder_geid": {
            "title": "Parent Folder Geid",
            "type": "string",
            "default": ""
          },
          "bucket": {
            "title": "Bucket",
            "type": "string",
            "default": ""
          },
          "minio_object_path": {
            "title": "Minio Object Path",
            "type": "string",
            "default": ""
          },
          "version_id": {
            "title": "Version Id",
            "type": "string",
            "default": ""
          }
        }
      },
      "FiledataMetaPOSTResponse": {
        "title": "FiledataMetaPOSTResponse",
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EAPIResponseCode"
              }
            ],
            "default": 200
          },
          "error_msg": {
            "title": "Error Msg",
            "type": "string",
            "default": ""
          },
          "page": {
            "title": "Page",
            "type": "integer",
            "default": 0
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "default": 1
          },
          "num_of_pages": {
            "title": "Num Of Pages",
            "type": "integer",
            "default": 1
          },
          "result": {
            "title": "Result",
            "type": "object",
            "default": {},
            "example": {
              "id": "85465212-168a-4f0c-a7aa-f3a19795d2ff",
              "parent": "28c608ac-1693-4318-a1c4-412caf2cd74a",
              "parent_path": "path.to.file",
              "type": "file",
              "zone": 0,
              "name": "filename",
              "size": 0,
              "owner": "username",
              "container_code": "project_code",
              "container_type": "project",
              "created_time": "2022-04-13 13:30:10.890347",
              "last_updated_time": "2022-04-13 13:30:10.890347",
              "storage": {
                "id": "ba623005-8183-419a-972a-e4ce0d539349",
                "location_uri": "https://example.com/item",
                "version": "1.0"
              },
              "extended": {
                "id": "dc763d28-7e74-4db3-a702-fa719aa702c6",
                "extra": {
                  "tags": [
                    "tag1",
                    "tag2"
                  ],
                  "system_tags": [
                    "tag1",
                    "tag2"
                  ],
                  "attributes": {
                    "101778d7-a628-41ea-823b-e4b377f3476c": {
                      "key1": "value1",
                      "key2": "value2"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "MessageHubPOST": {
        "title": "MessageHubPOST",
        "required": [
          "message",
          "channel"
        ],
        "type": "object",
        "properties": {
          "message": {
            "title": "Message",
            "type": "string"
          },
          "channel": {
            "title": "Channel",
            "type": "string"
          }
        }
      },
      "MessageHubPOSTResponse": {
        "title": "MessageHubPOSTResponse",
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EAPIResponseCode"
              }
            ],
            "default": 200
          },
          "error_msg": {
            "title": "Error Msg",
            "type": "string",
            "default": ""
          },
          "page": {
            "title": "Page",
            "type": "integer",
            "default": 0
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "default": 1
          },
          "num_of_pages": {
            "title": "Num Of Pages",
            "type": "integer",
            "default": 1
          },
          "result": {
            "title": "Result",
            "type": "object",
            "default": {},
            "example": "succeed"
          }
        }
      },
      "ResourceLockBulkRequestBody": {
        "title": "ResourceLockBulkRequestBody",
        "required": [
          "resource_keys",
          "operation"
        ],
        "type": "object",
        "properties": {
          "resource_keys": {
            "title": "Resource Keys",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of identity keys to mark the locked resource, can be path, geid, guid"
          },
          "operation": {
            "$ref": "#/components/schemas/ResourceLockOperation"
          }
        }
      },
      "ResourceLockBulkResponse": {
        "title": "ResourceLockBulkResponse",
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EAPIResponseCode"
              }
            ],
            "default": 200
          },
          "error_msg": {
            "title": "Error Msg",
            "type": "string",
            "default": ""
          },
          "page": {
            "title": "Page",
            "type": "integer",
            "default": 0
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "default": 1
          },
          "num_of_pages": {
            "title": "Num Of Pages",
            "type": "integer",
            "default": 1
          },
          "result": {
            "title": "Result",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          }
        }
      },
      "ResourceLockOperation": {
        "title": "ResourceLockOperation",
        "enum": [
          "read",
          "write",
          "<class 'models.resource_lock_reqres.ResourceLockOperation.Config'>"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ResourceLockRequestBody": {
        "title": "ResourceLockRequestBody",
        "required": [
          "resource_key",
          "operation"
        ],
        "type": "object",
        "properties": {
          "resource_key": {
            "title": "Resource Key",
            "type": "string",
            "description": "An identity key to mark the locked resource, can be path, geid, guid"
          },
          "operation": {
            "$ref": "#/components/schemas/ResourceLockOperation"
          }
        }
      },
      "ResourceLockResponse": {
        "title": "ResourceLockResponse",
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EAPIResponseCode"
              }
            ],
            "default": 200
          },
          "error_msg": {
            "title": "Error Msg",
            "type": "string",
            "default": ""
          },
          "page": {
            "title": "Page",
            "type": "integer",
            "default": 0
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "default": 1
          },
          "num_of_pages": {
            "title": "Num Of Pages",
            "type": "integer",
            "default": 1
          },
          "result": {
            "$ref": "#/components/schemas/ResourceLockResponseResult"
          }
        }
      },
      "ResourceLockResponseResult": {
        "title": "ResourceLockResponseResult",
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "string"
          }
        }
      },
      "TaskDispatchDELETE": {
        "title": "TaskDispatchDELETE",
        "required": [
          "session_id"
        ],
        "type": "object",
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string",
            "default": "Container"
          },
          "job_id": {
            "title": "Job Id",
            "type": "string",
            "default": "*"
          },
          "action": {
            "title": "Action",
            "type": "string",
            "default": "*"
          },
          "code": {
            "title": "Code",
            "type": "string",
            "default": "*"
          },
          "operator": {
            "title": "Operator",
            "type": "string",
            "default": "*"
          }
        }
      },
      "TaskDispatchPOST": {
        "title": "TaskDispatchPOST",
        "required": [
          "session_id",
          "task_id",
          "job_id",
          "source",
          "action",
          "target_status",
          "code",
          "operator"
        ],
        "type": "object",
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string",
            "default": "Container"
          },
          "task_id": {
            "title": "Task Id",
            "type": "string"
          },
          "job_id": {
            "title": "Job Id",
            "type": "string"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "action": {
            "title": "Action",
            "type": "string"
          },
          "target_status": {
            "title": "Target Status",
            "type": "string"
          },
          "code": {
            "title": "Code",
            "type": "string"
          },
          "operator": {
            "title": "Operator",
            "type": "string"
          },
          "progress": {
            "title": "Progress",
            "type": "integer",
            "default": 0
          },
          "payload": {
            "title": "Payload",
            "type": "object",
            "default": {}
          }
        }
      },
      "TaskDispatchPOSTResponse": {
        "title": "TaskDispatchPOSTResponse",
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EAPIResponseCode"
              }
            ],
            "default": 200
          },
          "error_msg": {
            "title": "Error Msg",
            "type": "string",
            "default": ""
          },
          "page": {
            "title": "Page",
            "type": "integer",
            "default": 0
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "default": 1
          },
          "num_of_pages": {
            "title": "Num Of Pages",
            "type": "integer",
            "default": 1
          },
          "result": {
            "title": "Result",
            "type": "object",
            "default": {},
            "example": {
              "session_id": "unique_session_2021",
              "label": "Container",
              "task_id": "task1",
              "job_id": "1bfe8fd8-8b41-11eb-a8bd-eaff9e667817-1616439732",
              "source": "file1.png",
              "action": "data_transfer",
              "status": "PENDING",
              "code": "gregtest",
              "operator": "zhengyang",
              "progress": 0,
              "payload": {},
              "update_timestamp": "1616439731"
            }
          }
        }
      },
      "TaskDispatchPUT": {
        "title": "TaskDispatchPUT",
        "required": [
          "session_id",
          "job_id",
          "status"
        ],
        "type": "object",
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string",
            "default": "Container"
          },
          "job_id": {
            "title": "Job Id",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "string"
          },
          "add_payload": {
            "title": "Add Payload",
            "type": "object",
            "default": {}
          },
          "progress": {
            "title": "Progress",
            "type": "integer",
            "default": 0
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    }
  }
}
